// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/yusing/gotify-api-client/v2/models"
)

// UpdateCurrentUserReader is a Reader for the UpdateCurrentUser structure.
type UpdateCurrentUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCurrentUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCurrentUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCurrentUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateCurrentUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCurrentUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /current/user/password] updateCurrentUser", response, response.Code())
	}
}

// NewUpdateCurrentUserOK creates a UpdateCurrentUserOK with default headers values
func NewUpdateCurrentUserOK() *UpdateCurrentUserOK {
	return &UpdateCurrentUserOK{}
}

/*
UpdateCurrentUserOK describes a response with status code 200, with default header values.

Ok
*/
type UpdateCurrentUserOK struct {
}

// IsSuccess returns true when this update current user o k response has a 2xx status code
func (o *UpdateCurrentUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update current user o k response has a 3xx status code
func (o *UpdateCurrentUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update current user o k response has a 4xx status code
func (o *UpdateCurrentUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update current user o k response has a 5xx status code
func (o *UpdateCurrentUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update current user o k response a status code equal to that given
func (o *UpdateCurrentUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update current user o k response
func (o *UpdateCurrentUserOK) Code() int {
	return 200
}

func (o *UpdateCurrentUserOK) Error() string {
	return fmt.Sprintf("[POST /current/user/password][%d] updateCurrentUserOK", 200)
}

func (o *UpdateCurrentUserOK) String() string {
	return fmt.Sprintf("[POST /current/user/password][%d] updateCurrentUserOK", 200)
}

func (o *UpdateCurrentUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCurrentUserBadRequest creates a UpdateCurrentUserBadRequest with default headers values
func NewUpdateCurrentUserBadRequest() *UpdateCurrentUserBadRequest {
	return &UpdateCurrentUserBadRequest{}
}

/*
UpdateCurrentUserBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateCurrentUserBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update current user bad request response has a 2xx status code
func (o *UpdateCurrentUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update current user bad request response has a 3xx status code
func (o *UpdateCurrentUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update current user bad request response has a 4xx status code
func (o *UpdateCurrentUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update current user bad request response has a 5xx status code
func (o *UpdateCurrentUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update current user bad request response a status code equal to that given
func (o *UpdateCurrentUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update current user bad request response
func (o *UpdateCurrentUserBadRequest) Code() int {
	return 400
}

func (o *UpdateCurrentUserBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /current/user/password][%d] updateCurrentUserBadRequest %s", 400, payload)
}

func (o *UpdateCurrentUserBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /current/user/password][%d] updateCurrentUserBadRequest %s", 400, payload)
}

func (o *UpdateCurrentUserBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCurrentUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCurrentUserUnauthorized creates a UpdateCurrentUserUnauthorized with default headers values
func NewUpdateCurrentUserUnauthorized() *UpdateCurrentUserUnauthorized {
	return &UpdateCurrentUserUnauthorized{}
}

/*
UpdateCurrentUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateCurrentUserUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update current user unauthorized response has a 2xx status code
func (o *UpdateCurrentUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update current user unauthorized response has a 3xx status code
func (o *UpdateCurrentUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update current user unauthorized response has a 4xx status code
func (o *UpdateCurrentUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update current user unauthorized response has a 5xx status code
func (o *UpdateCurrentUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update current user unauthorized response a status code equal to that given
func (o *UpdateCurrentUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update current user unauthorized response
func (o *UpdateCurrentUserUnauthorized) Code() int {
	return 401
}

func (o *UpdateCurrentUserUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /current/user/password][%d] updateCurrentUserUnauthorized %s", 401, payload)
}

func (o *UpdateCurrentUserUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /current/user/password][%d] updateCurrentUserUnauthorized %s", 401, payload)
}

func (o *UpdateCurrentUserUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCurrentUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCurrentUserForbidden creates a UpdateCurrentUserForbidden with default headers values
func NewUpdateCurrentUserForbidden() *UpdateCurrentUserForbidden {
	return &UpdateCurrentUserForbidden{}
}

/*
UpdateCurrentUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateCurrentUserForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update current user forbidden response has a 2xx status code
func (o *UpdateCurrentUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update current user forbidden response has a 3xx status code
func (o *UpdateCurrentUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update current user forbidden response has a 4xx status code
func (o *UpdateCurrentUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update current user forbidden response has a 5xx status code
func (o *UpdateCurrentUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update current user forbidden response a status code equal to that given
func (o *UpdateCurrentUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update current user forbidden response
func (o *UpdateCurrentUserForbidden) Code() int {
	return 403
}

func (o *UpdateCurrentUserForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /current/user/password][%d] updateCurrentUserForbidden %s", 403, payload)
}

func (o *UpdateCurrentUserForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /current/user/password][%d] updateCurrentUserForbidden %s", 403, payload)
}

func (o *UpdateCurrentUserForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCurrentUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
