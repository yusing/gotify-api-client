// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/yusing/gotify-api-client/v2/models"
)

// StreamMessagesReader is a Reader for the StreamMessages structure.
type StreamMessagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StreamMessagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStreamMessagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStreamMessagesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStreamMessagesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStreamMessagesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStreamMessagesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /stream] streamMessages", response, response.Code())
	}
}

// NewStreamMessagesOK creates a StreamMessagesOK with default headers values
func NewStreamMessagesOK() *StreamMessagesOK {
	return &StreamMessagesOK{}
}

/*
StreamMessagesOK describes a response with status code 200, with default header values.

Ok
*/
type StreamMessagesOK struct {
	Payload *models.MessageExternal
}

// IsSuccess returns true when this stream messages o k response has a 2xx status code
func (o *StreamMessagesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stream messages o k response has a 3xx status code
func (o *StreamMessagesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stream messages o k response has a 4xx status code
func (o *StreamMessagesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stream messages o k response has a 5xx status code
func (o *StreamMessagesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stream messages o k response a status code equal to that given
func (o *StreamMessagesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stream messages o k response
func (o *StreamMessagesOK) Code() int {
	return 200
}

func (o *StreamMessagesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stream][%d] streamMessagesOK %s", 200, payload)
}

func (o *StreamMessagesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stream][%d] streamMessagesOK %s", 200, payload)
}

func (o *StreamMessagesOK) GetPayload() *models.MessageExternal {
	return o.Payload
}

func (o *StreamMessagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageExternal)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamMessagesBadRequest creates a StreamMessagesBadRequest with default headers values
func NewStreamMessagesBadRequest() *StreamMessagesBadRequest {
	return &StreamMessagesBadRequest{}
}

/*
StreamMessagesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StreamMessagesBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this stream messages bad request response has a 2xx status code
func (o *StreamMessagesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stream messages bad request response has a 3xx status code
func (o *StreamMessagesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stream messages bad request response has a 4xx status code
func (o *StreamMessagesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stream messages bad request response has a 5xx status code
func (o *StreamMessagesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stream messages bad request response a status code equal to that given
func (o *StreamMessagesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stream messages bad request response
func (o *StreamMessagesBadRequest) Code() int {
	return 400
}

func (o *StreamMessagesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stream][%d] streamMessagesBadRequest %s", 400, payload)
}

func (o *StreamMessagesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stream][%d] streamMessagesBadRequest %s", 400, payload)
}

func (o *StreamMessagesBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *StreamMessagesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamMessagesUnauthorized creates a StreamMessagesUnauthorized with default headers values
func NewStreamMessagesUnauthorized() *StreamMessagesUnauthorized {
	return &StreamMessagesUnauthorized{}
}

/*
StreamMessagesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StreamMessagesUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this stream messages unauthorized response has a 2xx status code
func (o *StreamMessagesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stream messages unauthorized response has a 3xx status code
func (o *StreamMessagesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stream messages unauthorized response has a 4xx status code
func (o *StreamMessagesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stream messages unauthorized response has a 5xx status code
func (o *StreamMessagesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stream messages unauthorized response a status code equal to that given
func (o *StreamMessagesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the stream messages unauthorized response
func (o *StreamMessagesUnauthorized) Code() int {
	return 401
}

func (o *StreamMessagesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stream][%d] streamMessagesUnauthorized %s", 401, payload)
}

func (o *StreamMessagesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stream][%d] streamMessagesUnauthorized %s", 401, payload)
}

func (o *StreamMessagesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *StreamMessagesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamMessagesForbidden creates a StreamMessagesForbidden with default headers values
func NewStreamMessagesForbidden() *StreamMessagesForbidden {
	return &StreamMessagesForbidden{}
}

/*
StreamMessagesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StreamMessagesForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this stream messages forbidden response has a 2xx status code
func (o *StreamMessagesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stream messages forbidden response has a 3xx status code
func (o *StreamMessagesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stream messages forbidden response has a 4xx status code
func (o *StreamMessagesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stream messages forbidden response has a 5xx status code
func (o *StreamMessagesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stream messages forbidden response a status code equal to that given
func (o *StreamMessagesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stream messages forbidden response
func (o *StreamMessagesForbidden) Code() int {
	return 403
}

func (o *StreamMessagesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stream][%d] streamMessagesForbidden %s", 403, payload)
}

func (o *StreamMessagesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stream][%d] streamMessagesForbidden %s", 403, payload)
}

func (o *StreamMessagesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *StreamMessagesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamMessagesInternalServerError creates a StreamMessagesInternalServerError with default headers values
func NewStreamMessagesInternalServerError() *StreamMessagesInternalServerError {
	return &StreamMessagesInternalServerError{}
}

/*
StreamMessagesInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type StreamMessagesInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this stream messages internal server error response has a 2xx status code
func (o *StreamMessagesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stream messages internal server error response has a 3xx status code
func (o *StreamMessagesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stream messages internal server error response has a 4xx status code
func (o *StreamMessagesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stream messages internal server error response has a 5xx status code
func (o *StreamMessagesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stream messages internal server error response a status code equal to that given
func (o *StreamMessagesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stream messages internal server error response
func (o *StreamMessagesInternalServerError) Code() int {
	return 500
}

func (o *StreamMessagesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stream][%d] streamMessagesInternalServerError %s", 500, payload)
}

func (o *StreamMessagesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stream][%d] streamMessagesInternalServerError %s", 500, payload)
}

func (o *StreamMessagesInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *StreamMessagesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
