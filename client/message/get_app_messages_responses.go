// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/yusing/gotify-api-client/v2/models"
)

// GetAppMessagesReader is a Reader for the GetAppMessages structure.
type GetAppMessagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAppMessagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAppMessagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAppMessagesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAppMessagesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAppMessagesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAppMessagesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /application/{id}/message] getAppMessages", response, response.Code())
	}
}

// NewGetAppMessagesOK creates a GetAppMessagesOK with default headers values
func NewGetAppMessagesOK() *GetAppMessagesOK {
	return &GetAppMessagesOK{}
}

/*
GetAppMessagesOK describes a response with status code 200, with default header values.

Ok
*/
type GetAppMessagesOK struct {
	Payload *models.PagedMessages
}

// IsSuccess returns true when this get app messages o k response has a 2xx status code
func (o *GetAppMessagesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get app messages o k response has a 3xx status code
func (o *GetAppMessagesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app messages o k response has a 4xx status code
func (o *GetAppMessagesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get app messages o k response has a 5xx status code
func (o *GetAppMessagesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get app messages o k response a status code equal to that given
func (o *GetAppMessagesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get app messages o k response
func (o *GetAppMessagesOK) Code() int {
	return 200
}

func (o *GetAppMessagesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application/{id}/message][%d] getAppMessagesOK %s", 200, payload)
}

func (o *GetAppMessagesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application/{id}/message][%d] getAppMessagesOK %s", 200, payload)
}

func (o *GetAppMessagesOK) GetPayload() *models.PagedMessages {
	return o.Payload
}

func (o *GetAppMessagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PagedMessages)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppMessagesBadRequest creates a GetAppMessagesBadRequest with default headers values
func NewGetAppMessagesBadRequest() *GetAppMessagesBadRequest {
	return &GetAppMessagesBadRequest{}
}

/*
GetAppMessagesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAppMessagesBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get app messages bad request response has a 2xx status code
func (o *GetAppMessagesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app messages bad request response has a 3xx status code
func (o *GetAppMessagesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app messages bad request response has a 4xx status code
func (o *GetAppMessagesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app messages bad request response has a 5xx status code
func (o *GetAppMessagesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get app messages bad request response a status code equal to that given
func (o *GetAppMessagesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get app messages bad request response
func (o *GetAppMessagesBadRequest) Code() int {
	return 400
}

func (o *GetAppMessagesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application/{id}/message][%d] getAppMessagesBadRequest %s", 400, payload)
}

func (o *GetAppMessagesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application/{id}/message][%d] getAppMessagesBadRequest %s", 400, payload)
}

func (o *GetAppMessagesBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAppMessagesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppMessagesUnauthorized creates a GetAppMessagesUnauthorized with default headers values
func NewGetAppMessagesUnauthorized() *GetAppMessagesUnauthorized {
	return &GetAppMessagesUnauthorized{}
}

/*
GetAppMessagesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAppMessagesUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get app messages unauthorized response has a 2xx status code
func (o *GetAppMessagesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app messages unauthorized response has a 3xx status code
func (o *GetAppMessagesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app messages unauthorized response has a 4xx status code
func (o *GetAppMessagesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app messages unauthorized response has a 5xx status code
func (o *GetAppMessagesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get app messages unauthorized response a status code equal to that given
func (o *GetAppMessagesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get app messages unauthorized response
func (o *GetAppMessagesUnauthorized) Code() int {
	return 401
}

func (o *GetAppMessagesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application/{id}/message][%d] getAppMessagesUnauthorized %s", 401, payload)
}

func (o *GetAppMessagesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application/{id}/message][%d] getAppMessagesUnauthorized %s", 401, payload)
}

func (o *GetAppMessagesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAppMessagesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppMessagesForbidden creates a GetAppMessagesForbidden with default headers values
func NewGetAppMessagesForbidden() *GetAppMessagesForbidden {
	return &GetAppMessagesForbidden{}
}

/*
GetAppMessagesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAppMessagesForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get app messages forbidden response has a 2xx status code
func (o *GetAppMessagesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app messages forbidden response has a 3xx status code
func (o *GetAppMessagesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app messages forbidden response has a 4xx status code
func (o *GetAppMessagesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app messages forbidden response has a 5xx status code
func (o *GetAppMessagesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get app messages forbidden response a status code equal to that given
func (o *GetAppMessagesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get app messages forbidden response
func (o *GetAppMessagesForbidden) Code() int {
	return 403
}

func (o *GetAppMessagesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application/{id}/message][%d] getAppMessagesForbidden %s", 403, payload)
}

func (o *GetAppMessagesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application/{id}/message][%d] getAppMessagesForbidden %s", 403, payload)
}

func (o *GetAppMessagesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAppMessagesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppMessagesNotFound creates a GetAppMessagesNotFound with default headers values
func NewGetAppMessagesNotFound() *GetAppMessagesNotFound {
	return &GetAppMessagesNotFound{}
}

/*
GetAppMessagesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAppMessagesNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get app messages not found response has a 2xx status code
func (o *GetAppMessagesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app messages not found response has a 3xx status code
func (o *GetAppMessagesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app messages not found response has a 4xx status code
func (o *GetAppMessagesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app messages not found response has a 5xx status code
func (o *GetAppMessagesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get app messages not found response a status code equal to that given
func (o *GetAppMessagesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get app messages not found response
func (o *GetAppMessagesNotFound) Code() int {
	return 404
}

func (o *GetAppMessagesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application/{id}/message][%d] getAppMessagesNotFound %s", 404, payload)
}

func (o *GetAppMessagesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application/{id}/message][%d] getAppMessagesNotFound %s", 404, payload)
}

func (o *GetAppMessagesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAppMessagesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
