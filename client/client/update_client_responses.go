// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/yusing/gotify-api-client/v2/models"
)

// UpdateClientReader is a Reader for the UpdateClient structure.
type UpdateClientReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateClientReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateClientOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateClientBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateClientUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateClientForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateClientNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /client/{id}] updateClient", response, response.Code())
	}
}

// NewUpdateClientOK creates a UpdateClientOK with default headers values
func NewUpdateClientOK() *UpdateClientOK {
	return &UpdateClientOK{}
}

/*
UpdateClientOK describes a response with status code 200, with default header values.

Ok
*/
type UpdateClientOK struct {
	Payload *models.Client
}

// IsSuccess returns true when this update client o k response has a 2xx status code
func (o *UpdateClientOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update client o k response has a 3xx status code
func (o *UpdateClientOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update client o k response has a 4xx status code
func (o *UpdateClientOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update client o k response has a 5xx status code
func (o *UpdateClientOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update client o k response a status code equal to that given
func (o *UpdateClientOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update client o k response
func (o *UpdateClientOK) Code() int {
	return 200
}

func (o *UpdateClientOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /client/{id}][%d] updateClientOK %s", 200, payload)
}

func (o *UpdateClientOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /client/{id}][%d] updateClientOK %s", 200, payload)
}

func (o *UpdateClientOK) GetPayload() *models.Client {
	return o.Payload
}

func (o *UpdateClientOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Client)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientBadRequest creates a UpdateClientBadRequest with default headers values
func NewUpdateClientBadRequest() *UpdateClientBadRequest {
	return &UpdateClientBadRequest{}
}

/*
UpdateClientBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateClientBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update client bad request response has a 2xx status code
func (o *UpdateClientBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update client bad request response has a 3xx status code
func (o *UpdateClientBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update client bad request response has a 4xx status code
func (o *UpdateClientBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update client bad request response has a 5xx status code
func (o *UpdateClientBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update client bad request response a status code equal to that given
func (o *UpdateClientBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update client bad request response
func (o *UpdateClientBadRequest) Code() int {
	return 400
}

func (o *UpdateClientBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /client/{id}][%d] updateClientBadRequest %s", 400, payload)
}

func (o *UpdateClientBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /client/{id}][%d] updateClientBadRequest %s", 400, payload)
}

func (o *UpdateClientBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientUnauthorized creates a UpdateClientUnauthorized with default headers values
func NewUpdateClientUnauthorized() *UpdateClientUnauthorized {
	return &UpdateClientUnauthorized{}
}

/*
UpdateClientUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateClientUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update client unauthorized response has a 2xx status code
func (o *UpdateClientUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update client unauthorized response has a 3xx status code
func (o *UpdateClientUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update client unauthorized response has a 4xx status code
func (o *UpdateClientUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update client unauthorized response has a 5xx status code
func (o *UpdateClientUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update client unauthorized response a status code equal to that given
func (o *UpdateClientUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update client unauthorized response
func (o *UpdateClientUnauthorized) Code() int {
	return 401
}

func (o *UpdateClientUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /client/{id}][%d] updateClientUnauthorized %s", 401, payload)
}

func (o *UpdateClientUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /client/{id}][%d] updateClientUnauthorized %s", 401, payload)
}

func (o *UpdateClientUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientForbidden creates a UpdateClientForbidden with default headers values
func NewUpdateClientForbidden() *UpdateClientForbidden {
	return &UpdateClientForbidden{}
}

/*
UpdateClientForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateClientForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update client forbidden response has a 2xx status code
func (o *UpdateClientForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update client forbidden response has a 3xx status code
func (o *UpdateClientForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update client forbidden response has a 4xx status code
func (o *UpdateClientForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update client forbidden response has a 5xx status code
func (o *UpdateClientForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update client forbidden response a status code equal to that given
func (o *UpdateClientForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update client forbidden response
func (o *UpdateClientForbidden) Code() int {
	return 403
}

func (o *UpdateClientForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /client/{id}][%d] updateClientForbidden %s", 403, payload)
}

func (o *UpdateClientForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /client/{id}][%d] updateClientForbidden %s", 403, payload)
}

func (o *UpdateClientForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientNotFound creates a UpdateClientNotFound with default headers values
func NewUpdateClientNotFound() *UpdateClientNotFound {
	return &UpdateClientNotFound{}
}

/*
UpdateClientNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateClientNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update client not found response has a 2xx status code
func (o *UpdateClientNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update client not found response has a 3xx status code
func (o *UpdateClientNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update client not found response has a 4xx status code
func (o *UpdateClientNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update client not found response has a 5xx status code
func (o *UpdateClientNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update client not found response a status code equal to that given
func (o *UpdateClientNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update client not found response
func (o *UpdateClientNotFound) Code() int {
	return 404
}

func (o *UpdateClientNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /client/{id}][%d] updateClientNotFound %s", 404, payload)
}

func (o *UpdateClientNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /client/{id}][%d] updateClientNotFound %s", 404, payload)
}

func (o *UpdateClientNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
