// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/yusing/gotify-api-client/v2/models"
)

// EnablePluginReader is a Reader for the EnablePlugin structure.
type EnablePluginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnablePluginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnablePluginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEnablePluginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnablePluginForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnablePluginNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEnablePluginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /plugin/{id}/enable] enablePlugin", response, response.Code())
	}
}

// NewEnablePluginOK creates a EnablePluginOK with default headers values
func NewEnablePluginOK() *EnablePluginOK {
	return &EnablePluginOK{}
}

/*
EnablePluginOK describes a response with status code 200, with default header values.

Ok
*/
type EnablePluginOK struct {
}

// IsSuccess returns true when this enable plugin o k response has a 2xx status code
func (o *EnablePluginOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable plugin o k response has a 3xx status code
func (o *EnablePluginOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable plugin o k response has a 4xx status code
func (o *EnablePluginOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable plugin o k response has a 5xx status code
func (o *EnablePluginOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enable plugin o k response a status code equal to that given
func (o *EnablePluginOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the enable plugin o k response
func (o *EnablePluginOK) Code() int {
	return 200
}

func (o *EnablePluginOK) Error() string {
	return fmt.Sprintf("[POST /plugin/{id}/enable][%d] enablePluginOK", 200)
}

func (o *EnablePluginOK) String() string {
	return fmt.Sprintf("[POST /plugin/{id}/enable][%d] enablePluginOK", 200)
}

func (o *EnablePluginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnablePluginUnauthorized creates a EnablePluginUnauthorized with default headers values
func NewEnablePluginUnauthorized() *EnablePluginUnauthorized {
	return &EnablePluginUnauthorized{}
}

/*
EnablePluginUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type EnablePluginUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this enable plugin unauthorized response has a 2xx status code
func (o *EnablePluginUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable plugin unauthorized response has a 3xx status code
func (o *EnablePluginUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable plugin unauthorized response has a 4xx status code
func (o *EnablePluginUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable plugin unauthorized response has a 5xx status code
func (o *EnablePluginUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this enable plugin unauthorized response a status code equal to that given
func (o *EnablePluginUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the enable plugin unauthorized response
func (o *EnablePluginUnauthorized) Code() int {
	return 401
}

func (o *EnablePluginUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugin/{id}/enable][%d] enablePluginUnauthorized %s", 401, payload)
}

func (o *EnablePluginUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugin/{id}/enable][%d] enablePluginUnauthorized %s", 401, payload)
}

func (o *EnablePluginUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnablePluginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePluginForbidden creates a EnablePluginForbidden with default headers values
func NewEnablePluginForbidden() *EnablePluginForbidden {
	return &EnablePluginForbidden{}
}

/*
EnablePluginForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EnablePluginForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this enable plugin forbidden response has a 2xx status code
func (o *EnablePluginForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable plugin forbidden response has a 3xx status code
func (o *EnablePluginForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable plugin forbidden response has a 4xx status code
func (o *EnablePluginForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable plugin forbidden response has a 5xx status code
func (o *EnablePluginForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this enable plugin forbidden response a status code equal to that given
func (o *EnablePluginForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the enable plugin forbidden response
func (o *EnablePluginForbidden) Code() int {
	return 403
}

func (o *EnablePluginForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugin/{id}/enable][%d] enablePluginForbidden %s", 403, payload)
}

func (o *EnablePluginForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugin/{id}/enable][%d] enablePluginForbidden %s", 403, payload)
}

func (o *EnablePluginForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnablePluginForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePluginNotFound creates a EnablePluginNotFound with default headers values
func NewEnablePluginNotFound() *EnablePluginNotFound {
	return &EnablePluginNotFound{}
}

/*
EnablePluginNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EnablePluginNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this enable plugin not found response has a 2xx status code
func (o *EnablePluginNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable plugin not found response has a 3xx status code
func (o *EnablePluginNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable plugin not found response has a 4xx status code
func (o *EnablePluginNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable plugin not found response has a 5xx status code
func (o *EnablePluginNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this enable plugin not found response a status code equal to that given
func (o *EnablePluginNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the enable plugin not found response
func (o *EnablePluginNotFound) Code() int {
	return 404
}

func (o *EnablePluginNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugin/{id}/enable][%d] enablePluginNotFound %s", 404, payload)
}

func (o *EnablePluginNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugin/{id}/enable][%d] enablePluginNotFound %s", 404, payload)
}

func (o *EnablePluginNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnablePluginNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePluginInternalServerError creates a EnablePluginInternalServerError with default headers values
func NewEnablePluginInternalServerError() *EnablePluginInternalServerError {
	return &EnablePluginInternalServerError{}
}

/*
EnablePluginInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EnablePluginInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this enable plugin internal server error response has a 2xx status code
func (o *EnablePluginInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable plugin internal server error response has a 3xx status code
func (o *EnablePluginInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable plugin internal server error response has a 4xx status code
func (o *EnablePluginInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable plugin internal server error response has a 5xx status code
func (o *EnablePluginInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this enable plugin internal server error response a status code equal to that given
func (o *EnablePluginInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the enable plugin internal server error response
func (o *EnablePluginInternalServerError) Code() int {
	return 500
}

func (o *EnablePluginInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugin/{id}/enable][%d] enablePluginInternalServerError %s", 500, payload)
}

func (o *EnablePluginInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugin/{id}/enable][%d] enablePluginInternalServerError %s", 500, payload)
}

func (o *EnablePluginInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnablePluginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
